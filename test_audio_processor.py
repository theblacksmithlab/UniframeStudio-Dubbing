#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AudioProcessor –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.audio_processor import AudioProcessor


def create_test_segments_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
    return {
        "segments": [
            {
                "id": 0,
                "start": 1.0,
                "end": 4.0,
                "text": "Test segment 1",
                "translated_text": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç 1",
                "tts_duration": 2.5  # –ö–æ—Ä–æ—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (3.0)
            },
            {
                "id": 1,
                "start": 5.0,
                "end": 8.0,
                "text": "Test segment 2",
                "translated_text": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç 2",
                "tts_duration": 4.2  # –î–ª–∏–Ω–Ω–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (3.0)
            },
            {
                "id": 2,
                "start": 10.0,
                "end": 12.5,
                "text": "Test segment 3",
                "translated_text": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç 3",
                "tts_duration": 2.5  # –¢–æ—á–Ω–æ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª
            }
        ]
    }


def test_audio_processor(wav_file_path, test_job_id="test_job_001"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç AudioProcessor

    :param wav_file_path: –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É WAV —Ñ–∞–π–ª—É
    :param test_job_id: ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(wav_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wav_file_path}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É")
        return False

    print(f"üéµ –¢–µ—Å—Ç–∏—Ä—É–µ–º AudioProcessor —Å —Ñ–∞–π–ª–æ–º: {wav_file_path}")
    print(f"üìÅ –¢–µ—Å—Ç job ID: {test_job_id}")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    segments_data = create_test_segments_data()

    print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:")
    for seg in segments_data["segments"]:
        original_duration = seg["end"] - seg["start"]
        print(f"  –°–µ–≥–º–µ–Ω—Ç {seg['id']}: {seg['start']:.1f}s - {seg['end']:.1f}s")
        print(f"    –û—Ä–∏–≥–∏–Ω–∞–ª: {original_duration:.1f}s ‚Üí TTS: {seg['tts_duration']:.1f}s")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_jobs_dir = "test_jobs"
    os.makedirs(test_jobs_dir, exist_ok=True)

    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioProcessor...")
        audio_processor = AudioProcessor(test_job_id, wav_file_path, segments_data)

        print("üì§ –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã...")
        audio_processor.extract_audio_segments()

        print("‚öôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã (—Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ/—Å–∂–∞—Ç–∏–µ)...")
        audio_processor.process_audio_segments()

        print("üîó –°–∫–ª–µ–∏–≤–∞–µ–º background audio...")
        background_audio_path = audio_processor.combine_background_audio()

        if background_audio_path:
            print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìÅ Background audio —Å–æ–∑–¥–∞–Ω: {background_audio_path}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            duration = audio_processor._get_audio_duration(background_audio_path)
            expected_duration = sum(seg['tts_duration'] for seg in segments_data['segments'])

            print(f"\nüìè –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.4f}s")
            print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {expected_duration:.4f}s")
            print(f"  –†–∞–∑–Ω–∏—Ü–∞: {duration - expected_duration:+.4f}s")

            if abs(duration - expected_duration) < 0.1:
                print("üéâ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è! (< 100–º—Å)")
            else:
                print("‚ö†Ô∏è  –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ > 100–º—Å")

            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å background audio")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –æ—á–∏—Å—Ç–∫–∞
        try:
            audio_processor.cleanup()
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except:
            pass


def create_test_wav_file(output_path="test_audio.wav", duration=15):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª"""
    print(f"üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª: {output_path}")

    cmd = [
        "ffmpeg", "-y",
        "-f", "lavfi",
        "-i", f"sine=frequency=440:duration={duration}",
        "-ar", "44100",
        "-acodec", "pcm_s16le",
        output_path
    ]

    import subprocess
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0 and os.path.exists(output_path):
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
            return output_path
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AudioProcessor")
    print("=" * 50)

    # –û–ø—Ü–∏—è 1: –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    print("1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1 –∏–ª–∏ 2): ").strip()

    if choice == "1":
        test_wav_path = create_test_wav_file("test_audio.wav", 15)
        if not test_wav_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
            return
    elif choice == "2":
        test_wav_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É: ").strip()
        if not test_wav_path:
            print("‚ùå –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    success = test_audio_processor(test_wav_path)

    if success:
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        if choice == "1":
            print(f"üóëÔ∏è  –ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_wav_path}")
    else:
        print("\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")


if __name__ == "__main__":
    main()