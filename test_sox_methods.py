#!/usr/bin/env python3
"""
–¢–µ—Å—Ç SOX: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ speed vs tempo –¥–ª—è —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –∞—É–¥–∏–æ
"""

import os
import subprocess
import sys


def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß {description}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


def get_audio_duration(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    cmd = [
        "ffprobe", "-v", "error",
        "-show_entries", "format=duration",
        "-of", "default=noprint_wrappers=1:nokey=1",
        file_path
    ]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        return float(result.stdout.strip())
    except:
        return 0.0


def create_test_audio(output_path="test_voice.wav"):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞)"""
    print(f"üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª: {output_path}")

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–≤—É–∫ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –≥–æ–ª–æ—Å (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ—Ç)
    cmd = [
        "ffmpeg", "-y",
        "-f", "lavfi",
        "-i", "sine=frequency=220:duration=3,sine=frequency=440:duration=3,sine=frequency=880:duration=3",
        "-filter_complex", "[0][1][2]amix=inputs=3:duration=longest",
        "-ar", "44100",
        "-acodec", "pcm_s16le",
        output_path
    ]

    return run_command(cmd, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ")


def test_sox_methods(input_file):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã SOX"""

    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return

    original_duration = get_audio_duration(input_file)
    print(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {original_duration:.3f}s")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    test_factors = [
        (0.75, "–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–∞ 30%"),
        (1.25, "—É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ 40%")
    ]

    results = []

    for factor, description in test_factors:
        print(f"\n{'=' * 50}")
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {description} (—Ñ–∞–∫—Ç–æ—Ä: {factor})")
        print(f"{'=' * 50}")

        expected_duration = original_duration / factor
        print(f"üìê –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {expected_duration:.3f}s")

        # –¢–µ—Å—Ç 1: SOX speed (–∏–∑–º–µ–Ω—è–µ—Ç —Ç–æ–Ω)
        speed_output = f"test_speed_{factor}.wav"
        cmd_speed = ["sox", input_file, speed_output, "speed", str(factor)]

        if run_command(cmd_speed, f"SOX speed {factor}"):
            speed_duration = get_audio_duration(speed_output)
            speed_diff = abs(speed_duration - expected_duration)
            print(f"   üìè –†–µ–∑—É–ª—å—Ç–∞—Ç: {speed_duration:.3f}s (—Ç–æ—á–Ω–æ—Å—Ç—å: ¬±{speed_diff:.3f}s)")
            results.append(("speed", factor, speed_duration, speed_diff, "–ò–ó–ú–ï–ù–Ø–ï–¢ –¢–û–ù"))

        # –¢–µ—Å—Ç 2: SOX tempo (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–Ω)
        tempo_output = f"test_tempo_{factor}.wav"
        cmd_tempo = ["sox", input_file, tempo_output, "tempo", str(factor)]

        if run_command(cmd_tempo, f"SOX tempo {factor}"):
            tempo_duration = get_audio_duration(tempo_output)
            tempo_diff = abs(tempo_duration - expected_duration)
            print(f"   üìè –†–µ–∑—É–ª—å—Ç–∞—Ç: {tempo_duration:.3f}s (—Ç–æ—á–Ω–æ—Å—Ç—å: ¬±{tempo_diff:.3f}s)")
            results.append(("tempo", factor, tempo_duration, tempo_diff, "–°–û–•–†–ê–ù–Ø–ï–¢ –¢–û–ù"))

        # –¢–µ—Å—Ç 3: ffmpeg atempo (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        atempo_output = f"test_atempo_{factor}.wav"
        cmd_atempo = [
            "ffmpeg", "-y", "-i", input_file,
            "-filter:a", f"atempo={factor}",
            atempo_output
        ]

        if run_command(cmd_atempo, f"ffmpeg atempo {factor}"):
            atempo_duration = get_audio_duration(atempo_output)
            atempo_diff = abs(atempo_duration - expected_duration)
            print(f"   üìè –†–µ–∑—É–ª—å—Ç–∞—Ç: {atempo_duration:.3f}s (—Ç–æ—á–Ω–æ—Å—Ç—å: ¬±{atempo_diff:.3f}s)")
            results.append(("atempo", factor, atempo_duration, atempo_diff, "–°–û–•–†–ê–ù–Ø–ï–¢ –¢–û–ù"))

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\n{'=' * 60}")
    print("üìä –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï")
    print(f"{'=' * 60}")
    print(f"{'–ú–µ—Ç–æ–¥':<10} {'–§–∞–∫—Ç–æ—Ä':<8} {'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':<12} {'–¢–æ—á–Ω–æ—Å—Ç—å':<10} {'–¢–æ–Ω'}")
    print("-" * 60)

    for method, factor, duration, diff, tone_info in results:
        print(f"{method:<10} {factor:<8} {duration:<12.3f} ¬±{diff:<9.3f} {tone_info}")

    print(f"\nüéß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –î–õ–Ø –ü–†–û–°–õ–£–®–ò–í–ê–ù–ò–Ø:")
    print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞:")
    for method, factor, _, _, _ in results:
        filename = f"test_{method}_{factor}.wav"
        if os.path.exists(filename):
            print(f"   - {filename}")


def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –∞—É–¥–∏–æ")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "audio_test.wav"

    if not os.path.exists(test_file):
        if not create_test_audio(test_file):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
            return

    print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {test_file}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
    test_sox_methods(test_file)

    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üí° –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –º–µ—Ç–æ–¥")


if __name__ == "__main__":
    main()